/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null) {return false;}
        ListNode slow = head;
        ListNode fast = head;
        
        // Traverse the list with slow and fast pointers
        while (fast != null && fast.next != null) {
            slow = slow.next;         // Move slow pointer one step
            fast = fast.next.next;    // Move fast pointer two steps
            
            // If slow and fast meet, a cycle is detected
            if (slow == fast) {
                return true;
            }
        }
        return false;
    }
}
