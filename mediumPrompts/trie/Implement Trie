class Trie {
    
    private class TrieNode
    {
        HashMap<Character, TrieNode> children;
        boolean lastLetter;
        public TrieNode()
        {
            children = new HashMap<>();
            lastLetter = false;
        }
    }

    TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    
    public void insert(String word) {
        TrieNode cur = root;
        for(int i =0; i<word.length(); i++)
        {
            if(!cur.children.containsKey(word.charAt(i)))
            {
                cur.children.put(word.charAt(i), new TrieNode());
            }
            cur = cur.children.get(word.charAt(i));
        }
        cur.lastLetter = true;
    }
    
    public boolean search(String word) {
        TrieNode cur = root;
        for(int i = 0; i<word.length(); i++)
        {
            if(!cur.children.containsKey(word.charAt(i)))
            {
                return false;
            }
            cur = cur.children.get(word.charAt(i));
        }
        if(cur.lastLetter == true)
        {
            return true;
        }
        return false;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode cur = root;
        for(int i = 0; i<prefix.length(); i++)
        {
            if(!cur.children.containsKey(prefix.charAt(i)))
            {
                return false;
            }
            cur = cur.children.get(prefix.charAt(i));
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
